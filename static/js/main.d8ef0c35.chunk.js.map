{"version":3,"sources":["Card.js","App.js","reportWebVitals.js","index.js"],"names":["Cards","props","seconds","image","data","weather","icon","className","style","backgroundColor","margin","dt","Date","toString","Image","src","wind_speed","temp","min","max","description","App","useState","latitude","setLatitude","longitude","setLongitude","setWeather","setTemprature","setWindSpeed","daily","setDaily","setCityName","setDescribe","savePositionToState","position","coords","console","log","fetchWeather","a","window","navigator","geolocation","getCurrentPosition","axios","get","res","current","timezone","main","milliseconds","date","hours","getHours","minutes","getMinutes","getSeconds","substr","error","useEffect","map","v","i","Card","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8ef0c35.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n\r\n\r\nconst Cards = (props) => {\r\n    const image = `http://openweathermap.org/img/wn/${props.data.weather[0].icon}.png`\r\n    const dateTime = (seconds) => {\r\n        const date = new Date(seconds * 1000)\r\n        return date.toString()\r\n    }\r\n\r\n\r\n\r\n\r\n    // console.log(props.data)\r\n    return (\r\n        <div className=\"cardContainer\" style={{ backgroundColor: \"green\", margin: \"10px\" }}>\r\n            <div className=\"row\">\r\n\r\n\r\n\r\n\r\n                <div className=\"cardDate\">{dateTime(props.data.dt)}</div >\r\n                <br /><br />\r\n\r\n                <Image className=\"mx-auto\" src={image} />\r\n                <br /><br />\r\n                <div className=\"cardWindSpeed\">Wind Speed: {props.data.wind_speed} MPH</div >\r\n                <br /><br />\r\n                <div className=\"cardMinTemp\">Min Temprature: {props.data.temp.min} °F</div >\r\n                <br /><br />\r\n                <div className=\"cardMaxTemp\">Max Temprature: {props.data.temp.max} °F</div >\r\n                <br /><br />\r\n                <div className=\"cardDescription\">Description: {props.data.weather[0].description} </div >\r\n                <br />\r\n\r\n            </div>\r\n        </div>\r\n        //     </div>\r\n        // </div >\r\n    )\r\n}\r\n\r\nexport default Cards","import React from \"react\";\r\nimport axios from \"axios\"\r\nimport { useEffect, useState } from \"react\"\r\nimport Cards from \"./Card\";\r\nimport './App.css'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const [latitude, setLatitude] = useState(53.47087);\r\n  const [longitude, setLongitude] = useState(-1.48834);\r\n  const [weather, setWeather] = useState('');\r\n  const [temprature, setTemprature] = useState(0);\r\n  const [windSpeed, setWindSpeed] = useState(0);\r\n\r\n  const [daily, setDaily] = useState([]);\r\n\r\n  const [cityName, setCityName] = useState('');\r\n  const [describe, setDescribe] = useState('');\r\n\r\n  const savePositionToState = (position) => {\r\n    setLatitude(position.coords.latitude);\r\n    setLongitude(position.coords.longitude);\r\n    console.log(position)\r\n  };\r\n\r\n  const fetchWeather = async () => {\r\n    try {\r\n      await window.navigator.geolocation.getCurrentPosition(savePositionToState);\r\n      const res = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=minutely,hourly&appid=270c918b01567c04eb8be0de00ccb30f&units=imperial`);\r\n      // const res = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=270c918b01567c04eb8be0de00ccb30f&units=imperial`);\r\n\r\n\r\n\r\n      // console.log(latitude)\r\n      setTemprature(res.data.current.temp);\r\n      setCityName(res.data.timezone)\r\n      setWeather(res.data.current.weather[0].main);\r\n      setDescribe(res.data.current.weather[0].description);\r\n      setWindSpeed(res.data.current.wind_speed);\r\n\r\n      setDaily(res.data.daily)\r\n\r\n      console.log(res.data);\r\n      const milliseconds = res.data.current.dt\r\n\r\n      const date = new Date(milliseconds * 1000)\r\n\r\n      var hours = date.getHours();\r\n      // Minutes part from the timestamp\r\n      var minutes = \"0\" + date.getMinutes();\r\n      // Seconds part from the timestamp\r\n      var seconds = \"0\" + date.getSeconds();\r\n\r\n      // Will display time in 10:30:23 format\r\n      var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n\r\n      // console.log(formattedTime);\r\n      // console.log(date)\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWeather()\r\n  }, [latitude, longitude]);\r\n\r\n  // gets ome data : [{day1},{day2}]\r\n  // iterate over that data\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"title\">\r\n        <h1>Weather Sheffield</h1>\r\n      </div>\r\n      {/* <div className=\"app_container\">\r\n        <h1>Weather App</h1>\r\n        <h2>{cityName}</h2>\r\n        <h2>{temprature} °F</h2>\r\n        <h2>{weather}</h2>\r\n        <h2>{describe}</h2>\r\n        <h2>{windSpeed} MPH</h2>\r\n      </div> */}\r\n      <div className=\"row\">\r\n        {daily.map((v, i) => {\r\n          return (\r\n            <div className=\"col-3\" key={i}>\r\n              <Cards data={v} id={i} />\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}